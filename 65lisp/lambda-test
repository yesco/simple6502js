# GC is wrong! it eats up cons of f!!!

./run -t $* <<HERE

; make sure eval doesn't loop on eval fun
(nil 3 4)
(T 3 4)

; eval dispatches on byte code number
; these are all same
(car (cons 42 666))
('car (cons 42 666))      ; first try to lookup car

"BUG: WHAT HAPPENS HERE? becomse self recurseive"

(65 (cons 42 666))        ; what it boils down to (caveat)

(\A (cons 42 666)         ; Alphabetical Lisp "byte code"
((+ 0 car) (cons 42 666)) ; lol

; (4711 (cons 42 66)) ; actually it uses address! f speed

(+ 3 4)
('+ 3 4)
(43 3 4)

; lambda gives closure
(lambda (n) (+ n n))
;'(closure ((n) (+ n)) (foo . 32)) ; TODO: read (3 . 4)

(lambda () (+ foo 1000))
((lambda () (+ foo 1000)))
((lambda (foo) (+ foo 1000)) 77)
((lambda (a b) (+ a b) (* a b)) 11 22)

((lambda (n) 42))

(lambda (n) (+ n n))
((lambda (n) (+ n n)) 3)
(de f (lambda (n) (+ n n)))
f
(f 3)

; use ('f ...) instead of ugly (funcall f ...)
; (f ...) means use global f

((lambda (f n) ('f n)) (lambda (n) (+ n n)) 42))
((lambda (f n) ('f n f)) (lambda (n) (+ n n)) 3)
((lambda (f n) ('f n f)) (lambda (n f) (+ n n)) 3)

((lambda (car c) (car c)) cdr (cons 42 666))
((lambda (car c) ('car c)) cdr (cons 666 42))

;; "real life" usage

(de fac (lambda (n)
  (if (= n 0) 1
    (* n (* (fac (- n 1)))))))
fac
(fac 0)
(fac 1)
(fac 2)
(fac 3)
(fac 4)
(fac 5)
(fac 6)
(fac 7)
(fac 8)
(fac 9)
; overflow - TODO: add bignum or D24
(fac 10)
; crash - TODO: add tail recursion on if/progn/immediate
;(fac 25)

(de fib (lambda (n)
  (if (< n 2) n
    (+ (fib (- n 1)) (fib (- n 2))))))
fib
(fib 0)
(fib 1)
(fib 2)
(fib 3)
(fib 4)
(fib 5)
(fib 6)
(fib 7)
(fib 8)
(fib 9)
(fib 10)
(fib 11)
(fib 12)
(fib 13)
(fib 14)
(fib 15)
(fib 16)
(fib 17)
(fib 18)
(fib 19)


HERE
