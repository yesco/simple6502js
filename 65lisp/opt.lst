; In principle these are the code-gen rules!
;; 79 opt/gen rules...
;; TODO: write an interpreter for it, might be smaller!
;
; TODO: capture ax changes?

0+
1+ jsr incax2
2+ jsr incax4
3+ jsr incax6
4+ jsr incax8
%d+ ldy (%d*2)  jsr incaxy

0-
1- jsr decax2
2- jsr decax4
3- jsr decax6
4- jsr decax8
%d- ldy (%d*2)  jsr decaxy

0* ldan 0  tax
1*
2* jsr aslax1
3* jsr mulax3
4* jsr aslax2
5* jsr mulax5
6* jsr mulax6
7* jsr mulax7
8* jsr aslax3
9* jsr mulax9
10* jsr mulax10 ; TODO ,\x00\x0a*

%d<< ldyn %d  jsr aslaxy

%d>> ldyn %d  jsr asraxy

0/ ; TODO: overflow
/ jsr tosdivax

0=  tay  bne +2             cpx 0        bne 0
%d= cmpn [%d&0xff]  bne +2  cpx [%d>>8]  bne 0

%d< tay  cmpn [w&0xff]  txa  sbcn [%d>>8]  tya  bcs 0
%d< tay  eorn 0x80  cmpn [%d&0xff^0x80]  txa  eorn 0x80 sbcn [w>>8 ^0x80]  tya  bcs 0 ; signed

; if not %d=I  then %d=  ... + jsr istrue
; if not %d<I  then %d=  ... + jsr iscarry

^2^ jmp incsp2
^4^ jmp incsp4
^6^ jmp incsp6
^8^ jmp incsp8
^%d^ ldyn [stk*2]  jmp addysp

0^ ldan 0  tay
T^ jsr retnil ; TODO: not 'T' hmmm...
9^ jmp retnil
9 jsr retnil


%d ldan [%d*2]  ldxn 0

{ [return mcp]
} [return mcp]

I [store AA] [compile] sec  bcsn EE {  [*(AA-1)=HERE] [compile]  } EE:

! jsr staxspidx
@ jsr ldaxi
A jsr ffcar
D jsr ffdcdr
. jsr princ
W jsr prin1
P jsr print

R^ [adjust stack] jsr 0000
R jsr 0000
Z [adjust stack] jmp 0000

:%2d sta [%d]  stx [%d+1]
;%2d lda [%d0xff]  ldx [%d>>8]

][
] jsr popax
[ jsr pushax

[%d+ %d+
[%d- %d-
[%d* %d*
[%d/ %d/
[%d= %d=
[%d< %d<
[%d^ %d^

+ jsr tosaddax
- jsr tossubax
* jsr asrax1  jsr tosmulax  andn 0xfe
/ jsr tosdivax  jsr aslax1  andn 0xfe
= jsr toseqax
C jsr cons


[%v [%v==ax] ; do nothing
[ jsr pushax  [ax.save=0]

%v [%v==%ax]
%lastvar [%lastvar==ax] jsr ldax0sp
%v [%v!=%ax] ldyn [2*(%v-a)]  jsr ldaxysp





