ca65 V2.18 - N/A
Main file   : Play/byte-sieve-prime.s
Current file: Play/byte-sieve-prime.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - N/A
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - N/A"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_putchar
000000r 1               	.export		_a
000000r 1               	.export		_b
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"BSS"
000000r 1               
000000r 1               _a:
000000r 1  00 00 00 00  	.res	256,$00
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
000100r 1               _b:
000100r 1  00 00 00 00  	.res	4,$00
000104r 1               
000104r 1               ; ---------------------------------------------------------------
000104r 1               ; unsigned int __near__ main (void)
000104r 1               ; ---------------------------------------------------------------
000104r 1               
000104r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; a[0]=0xff;
000000r 1               ;
000000r 1  20 rr rr     	jsr     decsp5
000003r 1  A9 FF        	lda     #$FF
000005r 1  8D rr rr     	sta     _a
000008r 1               ;
000008r 1               ; for(t=1; t; t++) a[t]=0xff;
000008r 1               ;
000008r 1  A2 00        	ldx     #$00
00000Ar 1  A9 01        	lda     #$01
00000Cr 1  A0 00        	ldy     #$00
00000Er 1  91 rr        L0048:	sta     (sp),y
000010r 1  B1 rr        	lda     (sp),y
000012r 1  F0 10        	beq     L0046
000014r 1  A8           	tay
000015r 1  A9 FF        	lda     #$FF
000017r 1  99 rr rr     	sta     _a,y
00001Ar 1  A0 00        	ldy     #$00
00001Cr 1  B1 rr        	lda     (sp),y
00001Er 1  18           	clc
00001Fr 1  69 01        	adc     #$01
000021r 1  4C rr rr     	jmp     L0048
000024r 1               ;
000024r 1               ; for(n=2; n<2048; n++) {
000024r 1               ;
000024r 1  A9 02        L0046:	lda     #$02
000026r 1  A0 03        L004A:	ldy     #$03
000028r 1  20 rr rr     	jsr     staxysp
00002Br 1  E0 08        	cpx     #$08
00002Dr 1  90 03        	bcc     L004B
00002Fr 1               ;
00002Fr 1               ; }
00002Fr 1               ;
00002Fr 1  4C rr rr     	jmp     incsp5
000032r 1               ;
000032r 1               ; if (a[n>>3] & (1<<(n&7))) {
000032r 1               ;
000032r 1  A0 04        L004B:	ldy     #$04
000034r 1  20 rr rr     	jsr     ldaxysp
000037r 1  20 rr rr     	jsr     shrax3
00003Ar 1  85 rr        	sta     ptr1
00003Cr 1  8A           	txa
00003Dr 1  18           	clc
00003Er 1  69 rr        	adc     #>(_a)
000040r 1  85 rr        	sta     ptr1+1
000042r 1  A0 rr        	ldy     #<(_a)
000044r 1  B1 rr        	lda     (ptr1),y
000046r 1  20 rr rr     	jsr     pusha0
000049r 1  A0 05        	ldy     #$05
00004Br 1  B1 rr        	lda     (sp),y
00004Dr 1  29 07        	and     #$07
00004Fr 1  A8           	tay
000050r 1  A9 01        	lda     #$01
000052r 1  20 rr rr     	jsr     aslaxy
000055r 1  20 rr rr     	jsr     tosandax
000058r 1  86 rr        	stx     tmp1
00005Ar 1  05 rr        	ora     tmp1
00005Cr 1  D0 03 4C rr  	jeq     L0015
000060r 1  rr           
000061r 1               ;
000061r 1               ; i=n;
000061r 1               ;
000061r 1  A0 04        	ldy     #$04
000063r 1  20 rr rr     	jsr     ldaxysp
000066r 1  A0 01        	ldy     #$01
000068r 1  20 rr rr     	jsr     staxysp
00006Br 1               ;
00006Br 1               ; t=0;
00006Br 1               ;
00006Br 1  A9 00        	lda     #$00
00006Dr 1  A8           	tay
00006Er 1  91 rr        	sta     (sp),y
000070r 1               ;
000070r 1               ; b[t++]= (i%10)+'0';
000070r 1               ;
000070r 1  A0 00        L0024:	ldy     #$00
000072r 1  B1 rr        	lda     (sp),y
000074r 1  48           	pha
000075r 1  18           	clc
000076r 1  69 01        	adc     #$01
000078r 1  91 rr        	sta     (sp),y
00007Ar 1  68           	pla
00007Br 1  18           	clc
00007Cr 1  69 rr        	adc     #<(_b)
00007Er 1  A8           	tay
00007Fr 1  A9 00        	lda     #$00
000081r 1  69 rr        	adc     #>(_b)
000083r 1  AA           	tax
000084r 1  98           	tya
000085r 1  20 rr rr     	jsr     pushax
000088r 1  A0 06        	ldy     #$06
00008Ar 1  20 rr rr     	jsr     pushwysp
00008Dr 1  A9 0A        	lda     #$0A
00008Fr 1  20 rr rr     	jsr     tosumoda0
000092r 1  A0 30        	ldy     #$30
000094r 1  20 rr rr     	jsr     incaxy
000097r 1  A0 00        	ldy     #$00
000099r 1  20 rr rr     	jsr     staspidx
00009Cr 1               ;
00009Cr 1               ; i/=10;
00009Cr 1               ;
00009Cr 1  A0 04        	ldy     #$04
00009Er 1  20 rr rr     	jsr     pushwysp
0000A1r 1  A9 0A        	lda     #$0A
0000A3r 1  20 rr rr     	jsr     tosudiva0
0000A6r 1  A0 01        	ldy     #$01
0000A8r 1  20 rr rr     	jsr     staxysp
0000ABr 1               ;
0000ABr 1               ; } while(i);
0000ABr 1               ;
0000ABr 1  A0 02        	ldy     #$02
0000ADr 1  B1 rr        	lda     (sp),y
0000AFr 1  88           	dey
0000B0r 1  11 rr        	ora     (sp),y
0000B2r 1  D0 BC        	bne     L0024
0000B4r 1               ;
0000B4r 1               ; putchar(b[--t]);
0000B4r 1               ;
0000B4r 1  88           	dey
0000B5r 1  B1 rr        L0047:	lda     (sp),y
0000B7r 1  38           	sec
0000B8r 1  E9 01        	sbc     #$01
0000BAr 1  91 rr        	sta     (sp),y
0000BCr 1  85 rr        	sta     ptr1
0000BEr 1  98           	tya
0000BFr 1  18           	clc
0000C0r 1  69 rr        	adc     #>(_b)
0000C2r 1  85 rr        	sta     ptr1+1
0000C4r 1  A0 rr        	ldy     #<(_b)
0000C6r 1  B1 rr        	lda     (ptr1),y
0000C8r 1  A2 00        	ldx     #$00
0000CAr 1  20 rr rr     	jsr     _putchar
0000CDr 1               ;
0000CDr 1               ; } while(t);
0000CDr 1               ;
0000CDr 1  A0 00        	ldy     #$00
0000CFr 1  B1 rr        	lda     (sp),y
0000D1r 1  D0 E2        	bne     L0047
0000D3r 1               ;
0000D3r 1               ; putchar(' ');
0000D3r 1               ;
0000D3r 1  AA           	tax
0000D4r 1  A9 20        	lda     #$20
0000D6r 1  20 rr rr     	jsr     _putchar
0000D9r 1               ;
0000D9r 1               ; for(i=n+n; i<2048; i+= n) {
0000D9r 1               ;
0000D9r 1  A0 04        	ldy     #$04
0000DBr 1  20 rr rr     	jsr     ldaxysp
0000DEr 1  18           	clc
0000DFr 1  A0 03        	ldy     #$03
0000E1r 1  71 rr        	adc     (sp),y
0000E3r 1  48           	pha
0000E4r 1  8A           	txa
0000E5r 1  C8           	iny
0000E6r 1  71 rr        	adc     (sp),y
0000E8r 1  AA           	tax
0000E9r 1  68           	pla
0000EAr 1  A0 01        	ldy     #$01
0000ECr 1  20 rr rr     	jsr     staxysp
0000EFr 1  A0 02        L0037:	ldy     #$02
0000F1r 1  20 rr rr     	jsr     ldaxysp
0000F4r 1  E0 08        	cpx     #$08
0000F6r 1  B0 43        	bcs     L0015
0000F8r 1               ;
0000F8r 1               ; a[i>>3]&= ~(1<<(i&7));
0000F8r 1               ;
0000F8r 1  A0 02        	ldy     #$02
0000FAr 1  20 rr rr     	jsr     ldaxysp
0000FDr 1  20 rr rr     	jsr     shrax3
000100r 1  18           	clc
000101r 1  69 rr        	adc     #<(_a)
000103r 1  A8           	tay
000104r 1  8A           	txa
000105r 1  69 rr        	adc     #>(_a)
000107r 1  AA           	tax
000108r 1  98           	tya
000109r 1  20 rr rr     	jsr     pushax
00010Cr 1  85 rr        	sta     ptr1
00010Er 1  86 rr        	stx     ptr1+1
000110r 1  A2 00        	ldx     #$00
000112r 1  A1 rr        	lda     (ptr1,x)
000114r 1  20 rr rr     	jsr     pusha0
000117r 1  A0 05        	ldy     #$05
000119r 1  B1 rr        	lda     (sp),y
00011Br 1  29 07        	and     #$07
00011Dr 1  A8           	tay
00011Er 1  A9 01        	lda     #$01
000120r 1  20 rr rr     	jsr     aslaxy
000123r 1  20 rr rr     	jsr     complax
000126r 1  20 rr rr     	jsr     tosandax
000129r 1  A0 00        	ldy     #$00
00012Br 1  20 rr rr     	jsr     staspidx
00012Er 1               ;
00012Er 1               ; for(i=n+n; i<2048; i+= n) {
00012Er 1               ;
00012Er 1  A0 04        	ldy     #$04
000130r 1  20 rr rr     	jsr     ldaxysp
000133r 1  A0 01        	ldy     #$01
000135r 1  20 rr rr     	jsr     addeqysp
000138r 1  4C rr rr     	jmp     L0037
00013Br 1               ;
00013Br 1               ; for(n=2; n<2048; n++) {
00013Br 1               ;
00013Br 1  A0 04        L0015:	ldy     #$04
00013Dr 1  20 rr rr     	jsr     ldaxysp
000140r 1  20 rr rr     	jsr     incax1
000143r 1  4C rr rr     	jmp     L004A
000146r 1               
000146r 1               .endproc
000146r 1               
000146r 1               
