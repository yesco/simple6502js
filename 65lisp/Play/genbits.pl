print "
// bits.h
//
// Oric Sprite definition macros, w color attrib support
//
// (>) 2025: jsk@yesco.org
//
// DON'T EDIT! - generated by Play/genbits.pl !

// - change ink color
#define _BLACK  0,
#define _RED__  1,
#define _GREEN  2,
#define _YELLO  3,
#define _BLUE_  4,
#define _MAGN_  5,
#define _CYAN_  6,
#define _WHITE  7,

// - 'I'nverted paper color, change ink color
#define IBLACK  128+0,
#define IRED__  128+1,
#define IGREEN  128+2,
#define IYELLO  128+3,
#define IBLUE_  128+4,
#define IMAGN_  128+5,
#define ICYAN_  128+6,
#define IWHITE  128+7,

// - equivalent to 0b1010111...
#define B(a,b,c,d,e,f,g,h) (128*a+64*b+32*c+16*d+8*e+4*f+2*g+h)

// - Convenience: _,_,1,_,1_,_, ....
#define _ 0

// - Convenience sprite byte defs
//      76543210
// a) B_1__1_111 - just binary number
// b)    _101011 - 6 pixels plus prefix
// c)     x_x_xx - simplier, looks better
// d)     xIxIxx - inverted colors

";

for $i (0..255) {
    print "\n";
    $b= sprintf("%08b", $i);
    $d= $b;
    $d=~ s/0/_/ge;
    print sprintf("#define B_$d     %3d\n", $i);
    # for "sprites"
    if ($i<64) {
        # old style _123456 _111111
        $d=~ s/^..//;
        print sprintf("#define    _$d     %3d,\n", $i+64);

        # new style 123467 xxxxxx
        $d=~ s/1/x/g;
        print sprintf("#define     $d     %3d,\n", $i+64);

        $d=~ s/_/I/g;
        if ($d=~ /I/) {
            print sprintf("#define     $d     %3d,\n", $i+64+128);
        }
    }
}
