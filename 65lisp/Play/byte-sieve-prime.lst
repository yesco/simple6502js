ca65 V2.18 - N/A
Main file   : Play/byte-sieve-prime.s
Current file: Play/byte-sieve-prime.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - N/A
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - N/A"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.export		_flags
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0004:
000000r 1  31 30 20 69  	.byte	$31,$30,$20,$69,$74,$65,$72,$61,$74,$69,$6F,$6E,$73,$0A,$00
000004r 1  74 65 72 61  
000008r 1  74 69 6F 6E  
00000Fr 1               L003A:
00000Fr 1  0A 25 64 20  	.byte	$0A,$25,$64,$20,$70,$72,$69,$6D,$65,$73,$00
000013r 1  70 72 69 6D  
000017r 1  65 73 00     
00001Ar 1               
00001Ar 1               .segment	"BSS"
000000r 1               
000000r 1               _flags:
000000r 1  00 00 00 00  	.res	8191,$00
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001FFFr 1               
001FFFr 1               ; ---------------------------------------------------------------
001FFFr 1               ; int __near__ main (void)
001FFFr 1               ; ---------------------------------------------------------------
001FFFr 1               
001FFFr 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; printf("10 iterations\n");
000000r 1               ;
000000r 1  A0 0A        	ldy     #$0A
000002r 1  20 rr rr     	jsr     subysp
000005r 1  A9 rr        	lda     #<(L0004)
000007r 1  A2 rr        	ldx     #>(L0004)
000009r 1  20 rr rr     	jsr     pushax
00000Cr 1  A0 02        	ldy     #$02
00000Er 1  20 rr rr     	jsr     _printf
000011r 1               ;
000011r 1               ; for (iter = 1; iter <= 10; iter ++) {
000011r 1               ;
000011r 1  A2 00        	ldx     #$00
000013r 1  A9 01        	lda     #$01
000015r 1  20 rr rr     L0043:	jsr     stax0sp
000018r 1  C9 0B        	cmp     #$0B
00001Ar 1  8A           	txa
00001Br 1  E9 00        	sbc     #$00
00001Dr 1  50 02        	bvc     L000D
00001Fr 1  49 80        	eor     #$80
000021r 1  30 03 4C rr  L000D:	jpl     L0007
000025r 1  rr           
000026r 1               ;
000026r 1               ; count=0;
000026r 1               ;
000026r 1  A2 00        	ldx     #$00
000028r 1  8A           	txa
000029r 1  A0 02        	ldy     #$02
00002Br 1  20 rr rr     	jsr     staxysp
00002Er 1               ;
00002Er 1               ; for (i = 0; i <= size; i++)
00002Er 1               ;
00002Er 1  A0 08        L0042:	ldy     #$08
000030r 1  20 rr rr     	jsr     staxysp
000033r 1  C9 FF        	cmp     #$FF
000035r 1  8A           	txa
000036r 1  E9 1F        	sbc     #$1F
000038r 1  50 02        	bvc     L0018
00003Ar 1  49 80        	eor     #$80
00003Cr 1  0A           L0018:	asl     a
00003Dr 1  A9 00        	lda     #$00
00003Fr 1  AA           	tax
000040r 1  90 21        	bcc     L003E
000042r 1               ;
000042r 1               ; flags[i] = true;
000042r 1               ;
000042r 1  A9 rr        	lda     #<(_flags)
000044r 1  A0 08        	ldy     #$08
000046r 1  18           	clc
000047r 1  71 rr        	adc     (sp),y
000049r 1  85 rr        	sta     ptr1
00004Br 1  A9 rr        	lda     #>(_flags)
00004Dr 1  C8           	iny
00004Er 1  71 rr        	adc     (sp),y
000050r 1  85 rr        	sta     ptr1+1
000052r 1  A9 01        	lda     #$01
000054r 1  A0 00        	ldy     #$00
000056r 1  91 rr        	sta     (ptr1),y
000058r 1               ;
000058r 1               ; for (i = 0; i <= size; i++)
000058r 1               ;
000058r 1  A0 09        	ldy     #$09
00005Ar 1  20 rr rr     	jsr     ldaxysp
00005Dr 1  20 rr rr     	jsr     incax1
000060r 1  4C rr rr     	jmp     L0042
000063r 1               ;
000063r 1               ; for (i = 0; i <= size; i++) {
000063r 1               ;
000063r 1  A0 08        L003E:	ldy     #$08
000065r 1  20 rr rr     	jsr     staxysp
000068r 1  C9 FF        	cmp     #$FF
00006Ar 1  8A           	txa
00006Br 1  E9 1F        	sbc     #$1F
00006Dr 1  50 02        	bvc     L0024
00006Fr 1  49 80        	eor     #$80
000071r 1  30 03 4C rr  L0024:	jpl     L0008
000075r 1  rr           
000076r 1               ;
000076r 1               ; if (flags[i]) {
000076r 1               ;
000076r 1  A9 rr        	lda     #<(_flags)
000078r 1  A0 08        	ldy     #$08
00007Ar 1  18           	clc
00007Br 1  71 rr        	adc     (sp),y
00007Dr 1  85 rr        	sta     ptr1
00007Fr 1  A9 rr        	lda     #>(_flags)
000081r 1  C8           	iny
000082r 1  71 rr        	adc     (sp),y
000084r 1  85 rr        	sta     ptr1+1
000086r 1  A0 00        	ldy     #$00
000088r 1  B1 rr        	lda     (ptr1),y
00008Ar 1  F0 69        	beq     L001F
00008Cr 1               ;
00008Cr 1               ; prime = i + i + 3;
00008Cr 1               ;
00008Cr 1  A0 09        	ldy     #$09
00008Er 1  20 rr rr     	jsr     ldaxysp
000091r 1  18           	clc
000092r 1  A0 08        	ldy     #$08
000094r 1  71 rr        	adc     (sp),y
000096r 1  48           	pha
000097r 1  8A           	txa
000098r 1  C8           	iny
000099r 1  71 rr        	adc     (sp),y
00009Br 1  AA           	tax
00009Cr 1  68           	pla
00009Dr 1  20 rr rr     	jsr     incax3
0000A0r 1  A0 06        	ldy     #$06
0000A2r 1  20 rr rr     	jsr     staxysp
0000A5r 1               ;
0000A5r 1               ; k = i + prime;
0000A5r 1               ;
0000A5r 1  18           	clc
0000A6r 1  A0 08        	ldy     #$08
0000A8r 1  71 rr        	adc     (sp),y
0000AAr 1  48           	pha
0000ABr 1  8A           	txa
0000ACr 1  C8           	iny
0000ADr 1  71 rr        	adc     (sp),y
0000AFr 1  AA           	tax
0000B0r 1  68           	pla
0000B1r 1  A0 04        	ldy     #$04
0000B3r 1  20 rr rr     	jsr     staxysp
0000B6r 1               ;
0000B6r 1               ; while (k <= size) {
0000B6r 1               ;
0000B6r 1  4C rr rr     	jmp     L002F
0000B9r 1               ;
0000B9r 1               ; flags[k] = false;
0000B9r 1               ;
0000B9r 1  A9 rr        L002D:	lda     #<(_flags)
0000BBr 1  A0 04        	ldy     #$04
0000BDr 1  18           	clc
0000BEr 1  71 rr        	adc     (sp),y
0000C0r 1  85 rr        	sta     ptr1
0000C2r 1  A9 rr        	lda     #>(_flags)
0000C4r 1  C8           	iny
0000C5r 1  71 rr        	adc     (sp),y
0000C7r 1  85 rr        	sta     ptr1+1
0000C9r 1  A9 00        	lda     #$00
0000CBr 1  A8           	tay
0000CCr 1  91 rr        	sta     (ptr1),y
0000CEr 1               ;
0000CEr 1               ; k += prime;
0000CEr 1               ;
0000CEr 1  A0 07        	ldy     #$07
0000D0r 1  20 rr rr     	jsr     ldaxysp
0000D3r 1  A0 04        	ldy     #$04
0000D5r 1  20 rr rr     	jsr     addeqysp
0000D8r 1               ;
0000D8r 1               ; while (k <= size) {
0000D8r 1               ;
0000D8r 1  A0 05        L002F:	ldy     #$05
0000DAr 1  20 rr rr     	jsr     ldaxysp
0000DDr 1  C9 FF        	cmp     #$FF
0000DFr 1  8A           	txa
0000E0r 1  E9 1F        	sbc     #$1F
0000E2r 1  50 02        	bvc     L0031
0000E4r 1  49 80        	eor     #$80
0000E6r 1  30 D1        L0031:	bmi     L002D
0000E8r 1               ;
0000E8r 1               ; count = count + 1;
0000E8r 1               ;
0000E8r 1  A0 03        	ldy     #$03
0000EAr 1  20 rr rr     	jsr     ldaxysp
0000EDr 1  20 rr rr     	jsr     incax1
0000F0r 1  A0 02        	ldy     #$02
0000F2r 1  20 rr rr     	jsr     staxysp
0000F5r 1               ;
0000F5r 1               ; for (i = 0; i <= size; i++) {
0000F5r 1               ;
0000F5r 1  A0 09        L001F:	ldy     #$09
0000F7r 1  20 rr rr     	jsr     ldaxysp
0000FAr 1  20 rr rr     	jsr     incax1
0000FDr 1  4C rr rr     	jmp     L003E
000100r 1               ;
000100r 1               ; for (iter = 1; iter <= 10; iter ++) {
000100r 1               ;
000100r 1  20 rr rr     L0008:	jsr     ldax0sp
000103r 1  20 rr rr     	jsr     incax1
000106r 1  4C rr rr     	jmp     L0043
000109r 1               ;
000109r 1               ; printf("\n%d primes", count);
000109r 1               ;
000109r 1  A9 rr        L0007:	lda     #<(L003A)
00010Br 1  A2 rr        	ldx     #>(L003A)
00010Dr 1  20 rr rr     	jsr     pushax
000110r 1  A0 07        	ldy     #$07
000112r 1  20 rr rr     	jsr     pushwysp
000115r 1  A0 04        	ldy     #$04
000117r 1  20 rr rr     	jsr     _printf
00011Ar 1               ;
00011Ar 1               ; }
00011Ar 1               ;
00011Ar 1  A0 0A        	ldy     #$0A
00011Cr 1  4C rr rr     	jmp     addysp
00011Fr 1               
00011Fr 1               .endproc
00011Fr 1               
00011Fr 1               
