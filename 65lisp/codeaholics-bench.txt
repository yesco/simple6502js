= ./65vm -b -e "(car (car (car (cdr (cdr (cdr (cdr '(1 2 3 4 ((5 6) 7) 8))))))))" | grep -a "cycles" | tee -a 
50153595 lisp		 --- used to be 43.38s once... AL: 23.74 JMP: 13s		30B (15C) (/ 1000 30)=   33  (/ 33 7.0) =  4.7
22072208 vm/switch	(/ 50153595 22072208.0) = 2.27					14B	  (/ 2270 14)=  162 (/ 162 7.0) = 23.1
14702472 vm/jmp		(/ 50153595 14702472.0) = 3.41	(/ 22072208 14702472.0) = 1.50		  (/ 3410 14)=  243 (/ 243 7.0) = 34.7
 5404264 asm            (/ 50153595  5404264.0) = 9.28	(/ 14702472  5404264.0) = 2.72	26B	  (/ 9280 26)=  356 (/ 356 7.0) = 50.9
 4190274 jit		(/ 50153595  4190274.0) =11.97					26B	  (/ 11970 26)= 460 (/ 460 7.0) = 65.7

(/ 50153595 (* 5000 7.0)) = 1432 c/op  (/ 1000000 1432.0) =  698 opps lisp
(/ 22072208 (* 5000 7.0)) =  630 c/op  (/ 1000000  630)   = 1587 opps vm/switch
(/ 14702472 (* 5000 7.0)) =  420 c/op  (/ 1000000  420)   = 2380 opps vm/jmp
(/  5404264 (* 5000 7.0)) =  154 c/op  (/ 1000000  154)   = 6493 opps asm
(/  4190274 (* 5000 7.0)) =  120 c/op  (/ 1000000  120)   = 8333 opps jit


# 10x = 50,000
494177487 lisp
213999096 vm/switch	(/ 494177487 213999096.0) = 2.31
140209326 vm/jmp	(/ 494177487 140209326.0) = 3.52
 46581088 asm		(/ 494177487  46581088.0) =10.61
 29978333 jit		(/ 494177487  29978333.0) =16.48 x !!!!

= ./65vm -b -e "(+ 1 2 3 4 5 6 7 8 9 10)"
35634166 lisp
45462618 vm/switch	(/ 35634166 45462618.0) = 0.78 !!! BAD
31185401   no [] -	(/ 35634166 31185401.0) = 1.14 !!! not much better
30872728 vm/jmp		(/ 35634166 30872728.0) = 1.15 !!! too much garbage [] etc
26410180   no [] -	(/ 35634166 26410180.0) = 1.35 ...
 4905547 asm		(/ 35634166  4905547.0) = 7.26
       - jit            # bug with ,XX values

= ./65jit -b -e "(+ 1 1 1 1 1 1 1 1 1 1)"  | grep -a cycles | tee -a a				---speed/byte---
35632450 lisp					= 1.00		44 bytes (11C cons)		(/ 1000 44) =  22   (/  44 10.0) =  4.4
30956171 vm/jmp		(/ 35632450 30956171.0) = 1.15		20 byte  (30B)     	(/ 1150 20) =  57   (/  57 10.0) =  5.7
 4558131 asm		(/ 35632450  4558131.0) = 7.82  	32 bytes			(/ 7820 32) = 244                  24.4
 3092463 jit		(/ 35632450  3092463.0) =11.52		32 bytes 			(/ 11520 32)= 360                  36.0
 2571158 jit/inline 1+	(/ 35632450  2571158.0) =13.86 +20%	59 bytes +84%			(/ 13860 59)= 234                  23.4

(/ 35632450 (* 5000 10)) = 712c  (/ 1000000 712) =   1404 opps lisp
(/ 30956171 (* 5000 10)) = 619c  (/ 1000000 619) =   1615 opps vm/jmp
(/  4558131 (* 5000 10)) =  91c  (/ 1000000  91) =  10989 opps asm
(/  3092463 (* 5000 10)) =  61c  (/ 1000000  61) =  16393 opps jit
(/  2571158 (* 5000 10)) =  51c  (/ 1000000  51) =  19607 opps jit


// ================================================================
// FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB FIB 

// 2024-12-10: codeaholics
// 
// FIB:
// (/ (* 3000 67) 41.53) -  4840 calls/s 54B - cc65
// (/ (* 3000 67) 29.17) -  6891 calls/s 39B - handwritten & my generated asm!
// (/ (* 3000 67) 18.00) - 11167 calls/s 64B - handwritten, using PHA
// (/ (* 3000 67)  8.20) - 24512 calls/s 32B - handwritten bytes, using PHA

// ./65lisp -e "(setq fib (lambda (a) (if (< a 2) a (+ (fib (- a 1)) (fib (- a 2)))))" -b 0 -e "(fib 8)"
//   0 =>   871294 
//   1     1723635 D= (- 1723635 871294)  852K
//   2     2536182 D= (- 2536182 1723635) 813K
//  10     9037342
//  11     9849945
//  30    25289486  (/ (- 25289486 871294) 30.0)  813940c per call (/ (* 30 67) 25.289) = 79.48 calls/s


// (/ 4840   79.48) = 61x   slower than cc65    - lisp
// (/ 4840  154.7)  = 31.3x ~ 2x faster than lisp, but 31x slower than cc65
// (/ 6891  4840.0) =  1.4x faster than cc65    - asm
// (/ 11167 4840.0) =  2.3x faster than cc65    - hand asm, PHA
// (/ 24512 4840.0) =  5.1x faster than cc65    - byte asm, PHA


// ./65vm -e "(dc fib (a) (if (< a 2) a (+ (recurse (- a 1)) (recurse (- a 2)))))" -b 0 -e "(fib 8)"
//      - =>    551641     
//      0 =>    764090    (- 764090 551641) = 212449 = 0.21s compilation
//      1      1269215     1.27s (/ (* 1 67) (- 1.27 0.764090)) =     132.4 opps
//      2      1702497     1.70s (/ (* 2 67) (- 1.70 0.764090))       143.2 
//      3      2135797     2.14s
//     10      5168662     5.17s (/ (* 10 67) (- 5.17 0.764090))      152.1
//    100     44151007    44.15s
//   5000   2166905274  2166.91s (/ (* 5000 67) (- 2166.91 0.764090)) 154.7 opps

//  
